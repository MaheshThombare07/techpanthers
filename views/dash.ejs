<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Store Placement Analysis</title>
    <link rel="stylesheet" href="style.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet.heat/dist/leaflet-heat.js"></script>
    <!-- <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous"> -->
    <style>
        body {
    font-family: Arial, sans-serif;
    background-color: #e9ecef;
    margin: 0;
    padding: 0;
}

nav {
    display: flex;
    align-items: center;
    justify-content: center;
    background: #2873d2;
    color: rgb(255, 255, 255);
    font-size: 18px;
    font-weight: bold;
}

#city-search {
    width: 100%; /* Make the input field fill the container */
    max-width: 330px; /* Set a max width so it doesn't grow too large */
    padding: 10px; /* Add padding inside the input */
    font-size: 16px; /* Set font size */
    box-sizing: border-box; /* Include padding in the width calculation */
}

/* .logo {
    height: 50px;
    margin-right: 15px;
} */

.container {
    display: flex;
    height: 90vh;
    height: fit-content;
}

.left-panel {
    width: 20%;
    padding: 20px;
   margin: 20px 10px;
    background: #e9ecef;
    width: 80%;
    height: fit-content;
}

.left-panel input,
.left-panel select,
.left-panel button {
    width: 100%;
    margin-bottom: 15px;
    padding: 12px;
    font-size: 16px;
    border-radius: 5px;
    border: 1px solid #ccc;
}

.left-panel button {
    background: #007bff;
    color: white;
    cursor: pointer;
    font-weight: bold;
}

.map-area {
    flex-grow: 1;
    background: #dee2e6;
    display: flex;
    /* align-items: center; */
    justify-content: center;
    font-size: 18px;
    font-weight: bold;
    color: #343a40;
    /* overflow-y: scroll; */
    margin-top: 14px;
}

#cmap{
width: 100vw;
height: 30vh;
background-color: #d5d7d9;
margin: 10px;
border-width: 10px;
display: flex;
justify-content: center;
flex-direction: row;
}
#map{
    width: 75vw;
    height: 100%;  
    overflow: hidden;

    padding: 10px;
    border: 2px solid black;
    
    }

    #map:before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(to top, rgba(0, 0, 0, 0.5), transparent);
        z-index: 10; /* Place the gradient above the map */
    }
    


    
select {
    margin-bottom: 15px;
    padding: 8px;
    font-size: 16px;
    border-radius: 5px;
}
#heatmap {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
    gap: 5px;
    padding: 10px;
    max-width: 40vw;
    background: white;
    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);
    top: -45px;
    position: relative;
    border-radius: 10px;
    /* position: fixed; */
    height: 60vh;
    overflow-y: auto;
    /* top: 120px; */
    /* left: 23%; */
    /* margin-top: 120px; */
    height: fit-content;
}
.city-block {
    display: flex;
    justify-content: center;
    align-items: center;
    align-items: center;
    font-size: 14px;
    font-weight: 500;
    color: white;
    text-align: center;
    cursor: pointer;
    border-radius: 5px;
    transition: transform 0.2s, background-color 0.3s;
    padding: 10px;
    min-height: 80px;
    font-family: math;
}
.city-block:hover {
    transform: scale(1.1);
}

.right-panel {
    width: 34%;
    padding: 20px;
    background: #e9ecef;
    /* overflow-y: auto; */
    height: fit-content;
}

.graph {
    margin-bottom: 25px;
    padding: 15px;
    background: white;
    border-radius: 10px;
    box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease-in-out;
    display: flex;
    flex-direction: column;
    align-items: center;
}

.graph h2 {
    text-align: center;
    font-size: 18px;
    margin-bottom: 10px;
}

.graph canvas {
    width: 100% !important;
    height: 250px !important;
}

.graph:hover {
    transform: scale(1.05);
}
#map {
            width: 100vw;
            height: 40vh;
        }

#suggestions {
    background: white;
    border: 1px solid #ccc;
    max-height: 150px;
    overflow-y: auto;
    display: none;
    border-radius: 5px;
}

#suggestions div {
    padding: 10px;
    cursor: pointer;
    font-size: 16px;
    width: 20%;
}

#suggestions div:hover {
    background: #007bff;
    color: white;
}

#cityFilter{
    visibility: hidden;
}
#sa{
    font-size: medium;
    text-align: center;
    


}


.gg{
    width: 80%;
    margin: 10px;
}
#suggested-area{
    padding: 15px;
    background: white;
    border-radius: 10px;
    box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.1);
}
    </style>
</head>
<body>
    <nav> 
        <h1>Store Placement Analysis</h1>
    </nav>
    <div class="container">
        <div class="">
        <aside class="left-panel graph">
            <form >
               
            <div id="suggestions"></div>
            <select id="store-type">
                <option value="grocery">City</option>
                <option value="electronics">Pune</option>
                <option value="clothing">Delhi</option>
                <option value="clothing">Mumbai</option>
            </select>
            <button id="submit-btn">Submit</button>
            </form>
            
            
        </aside>
        <div class="gg graph">
            <p>ðŸŸ¢ High demand</p>
        <p> ðŸŸ¡ Medium demand</p>
        <p>ðŸ”´ Low demand</p>
        </div>
    </div>
        <main class="map-area">
            <div><select id="cityFilter">
                <option value="all">Show All</option>
            </select>
        
            <div id="heatmap">
                
            </div>
            <div id="suggested-area"></div> 
            </div>
        </main>
        <aside class="right-panel">
            <div class="graph" id="population-density">
                <h2>Population Density</h2>
                <canvas id="populationChart"></canvas>
            </div>
            <div class="graph" id="revenue-analysis">
                <h2>Revenue Analysis</h2>
                <canvas id="revenueChart"></canvas>
            </div>
            <div class="graph" id="growth-trend">
                <h2>Growth Trend</h2>
                <canvas id="growthChart"></canvas>
            </div>
        </aside>
    </div>
    <input type="hidden" id="cities-data" value='<%= JSON.stringify(cities) %>'>


    <div id="map"></div>


    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script>
        let suggestedArea=document.querySelector("#suggested-area");
        let heatmap=document.querySelector("#heatmap");
        
        // Initialize the map
        var map = L.map('map').setView([18.5204, 73.8567], 10); // Center on Pune

        // Add OpenStreetMap tiles
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; OpenStreetMap contributors'
        }).addTo(map);

        // Array of points
        var points = [
            { lat: 18.5204, lng: 73.8567, title: "Pune" },
            { lat: 19.0760, lng: 72.8777, title: "Mumbai" },
            { lat: 17.3850, lng: 78.4867, title: "Hyderabad" }
        ];

        // Add markers
        points.forEach(point => {
            L.marker([point.lat, point.lng]).addTo(map)
                .bindPopup(point.title);
        });
    


   


        let one =0;
        let two =0;
        let three =0;
let selectedCity;
let cities = JSON.parse(document.getElementById('cities-data').value); // Getting data from hidden input
console.log("Available cities:", cities);

let cityData = []; // Declare globally

// if(!selectedCity){
//     // alert("hi");
//     suggestedArea.style.opacity="0";
//     heatmap.style.opacity="0";
    
    
// }
document.getElementById("store-type").addEventListener("change", function () {
    // suggestedArea.style.opacity="1";
    // heatmap.style.opacity="1";
    selectedCity = this.options[this.selectedIndex].text; // Get selected city text
    console.log("Selected City:", selectedCity);
    // map.setView([selectedCity.lat, selectedCity.lng], 10);
    console.log("ccccccccccccccccc",cities[selectedCity])
    if(selectedCity==="Pune"){
        map.setView([18.5204, 73.8567], 10);
    }
    else if(selectedCity==="Delhi"){
        map.setView([28.6139, 77.2090], 10);
    }
    else if(selectedCity==="Mumbai"){
        map.setView([19.0760, 72.8777], 10);
    }


    for (let z of cities[selectedCity]) {
    console.log("Adding marker:", z.lat, z.lng);

    // Add marker for each location in the selected city
    L.marker([z.lat, z.lng])
        .addTo(map)
        .bindPopup(z.name);
}


    if (cities[selectedCity]) {
        cityData = cities[selectedCity]; // Assign selected city's data
        console.log("City Data:", cityData);

        renderHeatmap(); // Re-render heatmap after updating cityData
    } else {
        console.log("No data available for this city.");
        cityData = [];
        renderHeatmap(); // Render empty heatmap
    }
    console.log(suggestNewStore(selectedCity));

});

// function getHeatColor(density) {
//     if (cityData.length === 0) return "#ffffff"; // If no data, return white
//     let minDensity = Math.min(...cityData.map(c => c.density));
//     let maxDensity = Math.max(...cityData.map(c => c.density));
//     let ratio = (density - minDensity) / (maxDensity - minDensity);

//     if (ratio < 0.2) return "#3498db";
//     if (ratio < 0.5) return "#2ecc71";
//     if (ratio < 0.8) return "#f1c40f";
//     return "#e74c3c";
// }
      // Function to calculate demand score and assign color
      function getHeatColor(area) {
    let demandScore = (area.foot_traffic * 0.5) + (area.daily_orders * 0.5) - (area.existing_stores * 150);
    console.log("ddddd",demandScore);
    if (demandScore > 250) return "#51a251";  // ðŸŸ¢ High demand (New store needed)
    if (demandScore > 100) return "#d7d77c"; // ðŸŸ¡ Medium demand (Consider opening)
    return "#e14848";                           // ðŸ”´ Low demand (Not ideal)
}

function renderHeatmap(filter = "all") {
    const heatmap = document.getElementById("heatmap");
    heatmap.innerHTML = "";

    if (cityData.length === 0) {
        heatmap.innerHTML = "<p>No data available for this city.</p>";
        return;
    }

    let filteredData = filter === "all" ? cityData : cityData.filter(city => city.name === filter);

    filteredData.forEach(city => {
        let cityBlock = document.createElement("div");
        cityBlock.classList.add("city-block");
        cityBlock.textContent = city.name;
        cityBlock.style.backgroundColor = getHeatColor(city);
         cityBlock.dataset.cityInfo = JSON.stringify(city); // Store city info in data attribute

        cityBlock.onclick = () => {
            // window.location.href = `index.html?lat=${city.lat}&lon=${city.lon}&name=${encodeURIComponent(city.name)}`;
        };

        heatmap.appendChild(cityBlock);
    });


    // Attach click event listener to #heatmap container (Event Delegation)
document.getElementById("heatmap").addEventListener("click", function (event) {
    if (event.target.classList.contains("city-block")) {
        let selectedCity = event.target.textContent.trim(); // Get city name
        let cityInfo = JSON.parse(event.target.dataset.cityInfo); // Retrieve city info

        console.log("Clicked City:", selectedCity);
        console.log("City Info:", cityInfo.daily_orders);

        // alert(`You selected: ${selectedCity}\nFoot Traffic: ${cityInfo.foot_traffic}\nDaily Orders: ${cityInfo.daily_orders}`);

        // Call function to update charts with city-specific data
        updateCharts(cityInfo);
    }
});
}
// ðŸ”¹ Function to update charts dynamically when a city is clicked
function updateCharts(cityInfo) {
    // âœ… Update Population Chart with City Data
    console.log("888888",cityInfo.daily_orders);
    // populationChart.data.datasets[0].data = [
    //     cityInfo.daily_orders|| 0, 
    //     cityInfo.existing_stores|| 0, 
    //     cityInfo.foot_traffic|| 0
        
    // ];
    // populationChart.update();
    one=0;
    two=0;
    three=0;
    
    // one=cityInfo.existing_stores+100;
    if(!cityInfo.existing_stores){
        one=cityInfo.existing_stores;
    }
    else{
        one=cityInfo.existing_stores+100;
    }
    two=cityInfo.daily_orders;
    three=cityInfo.foot_traffic;
    add();
    console.log("Add ! Time");
}

        cityFilter.addEventListener("change", (e) => {
            renderHeatmap(e.target.value);
        });
    </script>




    <script>

document.getElementById("submit-btn").addEventListener("click", function() {
    alert("Search: " + document.getElementById("city-search").value + "\nStore Type: " + document.getElementById("store-type").value);
});
let populationChart;
// ðŸ”¹ Function to create different types of charts
function createChart(ctx, type, labels, data, backgroundColor, borderColor) {
    if (populationChart) {
        populationChart.destroy(); // âœ… Destroy existing chart before creating a new one
    }
    
    populationChart=new Chart(ctx, {
        type: type,
        data: {
            labels: labels,
            datasets: [{
                label: "Value",
                data: data,
                backgroundColor: backgroundColor,
                borderColor: borderColor,
                borderWidth: 2
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: { display: true },
                tooltip: { 
                    enabled: true,
                    mode: 'index',
                    intersect: false
                }
            },
            interaction: {
                mode: "nearest",
                intersect: false
            },
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
}

// ðŸ”¹ Creating different graphs with improved design
function add(){
    createChart(
    document.getElementById("populationChart"),
    "bar",
    ["Existing Stores", "Daily Orders", "Low"],
    [one, two, three],
    ["#007bff", "#28a745", "#dc3545"],
    ["#0056b3", "#1e7e34", "#c82333"]
);
}

createChart(
    document.getElementById("revenueChart"),
    "line",
    ["Q1", "Q2", "Q3", "Q4"],
    [5000, 7000, 10000, 15000],
    ["rgba(255, 99, 132, 0.5)"],
    ["rgba(255, 99, 132, 1)"]
);

createChart(
    document.getElementById("growthChart"),
    "doughnut",
    ["Increasing", "Stable", "Declining"],
    [60, 25, 15],
    ["#ffc107", "#17a2b8", "#6c757d"],
    ["#e0a800", "#138496", "#5a6268"]
);

// ðŸ”¹ Search Suggestion for Indian Cities using API
const cityInput = document.getElementById("city-search");
const suggestions = document.getElementById("suggestions");
let citiesjs = [];

// ðŸ”¹ Fetch Indian Cities from API
async function fetchCities() {
    try {
        const response = await fetch("https://countriesnow.space/api/v0.1/countries/cities", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ country: "India" })
        });
        const data = await response.json();
        citiesjs = data.data;
    } catch (error) {
        console.error("Error fetching cities:", error);
    }
}

// ðŸ”¹ Filter and show suggestions
cityInput.addEventListener("input", function () {
    const value = cityInput.value.toLowerCase();
    suggestions.innerHTML = "";
    if (value === "") {
        suggestions.style.display = "none";
        return;
    }

    const filteredCities = citiesjs.filter(city => city.toLowerCase().includes(value));
    filteredCities.forEach(city => {
        const div = document.createElement("div");
        div.textContent = city;
        div.addEventListener("click", function () {
            cityInput.value = city;
            suggestions.style.display = "none";
        });
        suggestions.appendChild(div);
    });
    suggestions.style.display = "block";
});

fetchCities();


function suggestNewStore(city) {
    let subAreas = cities[city]; ;

    // Sort by highest demand & foot traffic, but fewer existing stores
    let bestArea = subAreas
        .filter(area => area.existing_stores === 0) // Only areas with no stores
        .sort((a, b) => (b.daily_orders + b.foot_traffic) - (a.daily_orders + a.foot_traffic))[0];

        
        
        let displayElement = document.getElementById("suggested-area");
        
        if (bestArea) {
            displayElement.innerHTML = `    <h3>Suggested Area</h3><hr><p id="#sa">Area: <strong style="color:green">${bestArea.name}</strong> &nbsp&nbsp&nbspExisting Stores:${bestArea.existing_stores}</p><p>Population :${bestArea.population_density} &nbsp &nbsp &nbsp Foot Traffic:${bestArea.foot_traffic}</p><p></p></p><p></p>`;
            
        } else {
            displayElement.innerHTML = `     <p id="#sa">No suitable area found.</p>`;
        }
        return bestArea || null; // Return best area or null if all have stores
}

document.querySelector(".city-block").addEventListener("click",()=>{
    console.log(document.querySelector(".city-block").textContent)
});


    </script>
</body>
</html>
